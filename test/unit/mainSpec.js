// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  describe("Virtual keypad module", function() {
    describe("vsKeypadLogViewCtrl", function() {
      return describe("cleanLog", function() {
        var ctrl, scope;
        ctrl = null;
        scope = null;
        beforeEach(function() {
          return module('virtualKeypad');
        });
        beforeEach(function() {
          return inject(function($controller) {
            scope = {};
            return ctrl = $controller('vsKeypadLogViewCtrl', {
              $scope: scope
            });
          });
        });
        it("should add parameters to scope", function() {
          expect(scope.wsLog).toBeDefined();
          expect(scope.devicePictureStatus).toBe(false);
          expect(scope.vkHelp).toBe(false);
          return expect(scope.vkMute).toBe(false);
        });
        it("should able to add & clear log array", function() {
          scope.wsLog.systemLog = [
            {
              data: "5",
              type: "key"
            }, {
              data: "5",
              type: "key"
            }, {
              data: "5",
              type: "key"
            }, {
              data: "5",
              type: "key"
            }, {
              data: "5",
              type: "key"
            }, {
              data: "5",
              type: "key"
            }, {
              data: "5",
              type: "key"
            }, {
              data: "5",
              type: "key"
            }, {
              data: "5",
              type: "key"
            }
          ];
          expect(scope.wsLog.systemLog.length).toEqual(9);
          scope.cleanLog();
          return expect(scope.wsLog.systemLog.length).toEqual(0);
        });
        it("should change disconnect status", function() {
          scope.$broadcast = function() {};
          scope.vkDisconnect = true;
          scope.disconnect();
          return expect(scope.vkDisconnect).toEqual(false);
        });
        return it("should change picture size", function() {
          scope.devicePlusButton();
          return expect(scope.devicePictureStatus).toEqual(true);
        });
      });
    });
    return describe("vsKeypadViewCtrl", function() {
      var ctrl, defaultModel, scope;
      ctrl = null;
      scope = null;
      defaultModel = null;
      beforeEach(function() {
        return module('virtualKeypad');
      });
      beforeEach(function() {
        return inject(function($controller) {
          var $timeout;
          scope = {};
          defaultModel = {
            keypad: {
              overlay: false
            },
            wsLog: {
              systemLog: []
            }
          };
          scope.$on = function() {};
          scope.$emit = function() {};
          scope.$broadcast = function() {};
          $timeout = function() {};
          return ctrl = $controller('vsKeypadViewCtrl', {
            $scope: scope,
            defaultModel: defaultModel
          });
        });
      });
      it("should change restoring overlay status", function() {
        scope.overlayRestoring = true;
        scope.overlayRestoringButtonClick({
          state: true
        });
        expect(scope.overlayRestoring).toBeTruthy();
        expect(defaultModel.keypad.overlay).toBeFalsy();
        scope.overlayRestoringButtonClick({
          state: false
        });
        expect(scope.overlayRestoring).toBeFalsy();
        return expect(defaultModel.keypad.overlay).toBeTruthy();
      });
      it("should toggle button", function() {
        var item;
        item = {
          state: false
        };
        scope.toggle_button(item, 10);
        return expect(item).toBeTruthy();
      });
      it("should act on overlay button click", function() {
        var item;
        item = {
          state: false,
          status: true
        };
        scope.overlayButtonClick(item);
        expect(item.state).toBeTruthy();
        item = {
          state: true,
          status: true
        };
        scope.overlayButtonClick(item);
        expect(item.state).toBeTruthy();
        item = {
          state: false,
          status: false
        };
        scope.overlayButtonClick(item);
        return expect(item.state).toBeFalsy();
      });
      return it("should act on keypad button click", function() {
        var item;
        item = {
          state: false
        };
        scope.keyClick(item);
        expect(item.state).toBeTruthy();
        item = {
          state: true
        };
        scope.keyClick(item);
        return expect(item.state).toBeTruthy();
      });
    });
  });

}).call(this);
